{"version":3,"sources":["serviceWorker.ts","components/Data.js","components/Plashka.tsx","components/ConversationList.tsx","components/App4.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","plashkaDATA","date","Date","text","name","avatarUrl","lastMessage","tempMessages","id","author","message","Math","round","random","timestamp","toLocaleString","Plashka","props","Arr","index","lastMesage","length","className","onClick","onClickBlock","src","photo","alt","ConversationList","this","indexDialog","map","item","key","Component","App","setState","React","PureComponent","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b45b5afb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const plashkaDATA = [\r\n    {\r\n      date: (new Date()),\r\n      text: 'Это просто текст первого комментария', \r\n      name: 'Hello Kitty',\r\n      avatarUrl: 'https://placekitten.com/g/63/64', \r\n      lastMessage: '',\r\n  },\r\n  {\r\n    date: (new Date()),\r\n    text: 'А это второго', \r\n    name: 'SECOND Kitty',\r\n    avatarUrl: 'https://placekitten.com/g/64/64',\r\n    lastMessage: '',\r\n},\r\n\r\n]\r\n\r\nexport    const tempMessages = [\r\n      [\r\n       {\r\n         id: 1,\r\n         author: 'JORJE',\r\n         message: `Тут мне пришлось попотетьи придумать цифру: ${Math.round(Math.random()*100)}`,\r\n         timestamp: new Date('Apr 22, 2020 07:22:13').toLocaleString()\r\n         \r\n\r\n       },\r\n       {\r\n         id: 2,\r\n         author: 'BEATLES',\r\n         message: 'Я так горжусь тобой',\r\n         timestamp: new Date('Apr 23, 2020 08:22:13').toLocaleString()\r\n       },\r\n\r\n     ],\r\n     [\r\n      {\r\n        id: 1,\r\n        author: 'OSTAP',\r\n        message: `Представляешь я написал сообщение с уникальной цифрой: ${Math.round(Math.random()*100)}`,\r\n        timestamp: new Date('Apr 18, 2020 07:22:13').toLocaleString()\r\n      },\r\n      {\r\n        id: 2,\r\n        author: 'vLADILEN',\r\n        message: 'Привет как дела это сообщение последнее, когда напишешь?',\r\n        timestamp: new Date('May 4, 2020 19:22:13').toLocaleString()\r\n      },\r\n\r\n    ]\r\n    ]","import React from \"react\"\r\nimport {tempMessages} from \"./Data\"\r\n\r\ninterface Iprops{\r\n    index: number;\r\n    key: number;\r\n    name: string;\r\n    text: string;\r\n    photo: string;\r\n    date: Date;\r\n    onClickBlock: ()=> void;\r\n}\r\n\r\nfunction Plashka(props: Iprops){\r\n  let Arr = tempMessages[props.index]\r\n  let lastMesage = Arr[Arr.length-1].message\r\n  let timestamp = Arr[Arr.length-1].timestamp\r\n    return(\r\n       <div className=\"wrapperPlashka\">\r\n       <div className=\"conversation-list-item\" onClick={props.onClickBlock}>\r\n           <img className=\"conversation-photo\" src={props.photo} alt=\"conversation\" />\r\n           <div className=\"conversation-info\">\r\n             <h1 className=\"conversation-title\">{props.name}</h1>\r\n             <p className=\"conversation-snippet\">{lastMesage}</p>\r\n             <p className=\"conversation-snippet\">{timestamp}</p>\r\n           </div>\r\n         </div>\r\n       </div>\r\n    )\r\n   }\r\nexport default Plashka\r\n","import React, {Component} from \"react\"\r\nimport {tempMessages} from \"./Data\"\r\n\r\nexport interface Istate{\r\n    indexDialog: number;\r\n  }\r\n\r\nclass ConversationList extends Component <Istate>{\r\n    render() { \r\n      return(\r\n        <div className=\"wrapperConversation\">\r\n          <div className=\"conversation-list\" >\r\n          {tempMessages[this.props.indexDialog].map((item,index) =>(\r\n           <div key={index} className=\"conversation-list-item\">\r\n               <div className=\"conversation-info\">\r\n                    <h1 className=\"conversation-title\">{item.author}</h1>\r\n                     <p className=\"conversation-snippet\">{item.message}</p>\r\n                     <h3>{item.timestamp}</h3>\r\n               </div>\r\n            </div>\r\n               \r\n          ) )}\r\n      </div>\r\n        </div>\r\n      ) \r\n    } \r\n  }\r\nexport default ConversationList\r\n","import React from \"react\";\r\nimport \"./App4.css\";\r\nimport \"./Messenger.css\"\r\nimport Plashka from \"./Plashka\"\r\nimport ConversationList from \"./ConversationList\"\r\nimport {plashkaDATA} from \"./Data\"\r\n\r\nexport interface Istate{\r\n  indexDialog: number;\r\n}\r\n\r\nclass App extends React.PureComponent {\r\n  state: Istate = {\r\n      indexDialog: 0,\r\n    }\r\n  onClickBlock(index:number){\r\n      this.setState({indexDialog: index})\r\n    }\r\n    \r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\"> \r\n      <div className=\"scrollable sidebar\">\r\n      \r\n        {plashkaDATA.map((item, index) => (\r\n          <Plashka\r\n            index={index}\r\n            key={index}\r\n            name={item.name} \r\n            text={item.text}\r\n            photo={item.avatarUrl}\r\n            date={item.date}\r\n            onClickBlock={() => this.onClickBlock(index)}\r\n            />\r\n        ))}  \r\n    </div>\r\n\r\n        <div className=\"scrollable content\">\r\n        <ConversationList\r\n         indexDialog={this.state.indexDialog}\r\n          >\r\n        </ConversationList>\r\n        </div>\r\n    </div> \r\n    );\r\n  }\r\n} \r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App4 from \"./components/App4\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App4/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}